from scipy.linalg import solve
import numpy as np


############# Zeros the matrices of A.I = C ##############
#### Where A are the coefficients, I is the current, C are the constants, and R are the resistances 
A = np.zeros((42,42))
I = np.zeros((42,1))
C = np.zeros((42,1))
R =1000 * np.ones((42,1))

R[6] = R[7] = R[8] = 10;

#print('The values are:', R[6], R[7], R[8])
#print(R)

############# Nodes first stage ##############
A[0][0] = 1 ; A[0][6] = -1 ; A[0][12] = -1 ; A[0][11] = 1 ; 					
A[1][1] = 1 ; A[1][7] = -1 ; A[1][13] = -1 ; A[1][6] = 1 ; 					
A[2][2] = 1 ; A[2][8] = -1 ; A[2][14] = -1 ; A[2][7] = 1 ; 					
A[3][3] = 1 ; A[3][9] = -1 ; A[3][15] = -1 ; A[3][8] = 1 ; 					
A[4][4] = 1 ; A[4][10] = -1 ; A[4][16] = -1 ; A[4][9] = 1 ; 					
A[5][5] = 1 ; A[5][11] = -1 ; A[5][17] = -1 ; A[5][10] = 1 ; 					


########### Nodes second stage ##############
A[6][12] = 1 ; A[6][18] = -1 ; A[6][24] = -1 ; A[6][23] = 1 ; 					
A[7][13] = 1 ; A[7][19] = -1 ; A[7][25] = -1 ; A[7][18] = 1 ; 					
A[8][14] = 1 ; A[8][20] = -1 ; A[8][26] = -1 ; A[8][19] = 1 ; 					
A[9][15] = 1 ; A[9][21] = -1 ; A[9][27] = -1 ; A[9][20] = 1 ; 					
A[10][16] = 1 ; A[10][22] = -1 ; A[10][28] = -1 ; A[10][21] = 1 ; 					
A[11][17] = 1 ; A[11][23] = -1 ; A[11][29] = -1 ; A[11][22] = 1 ; 					

########## Nodes third stage ##############
A[12][24] = 1 ; A[12][30] = -1 ; A[12][36] = -1 ; A[12][35] = 1 ; 						
A[13][25] = 1 ; A[13][31] = -1 ; A[13][37] = -1 ; A[13][30] = 1 ; 						
A[14][26] = 1 ; A[14][32] = -1 ; A[14][38] = -1 ; A[14][31] = 1 ; 						
A[15][27] = 1 ; A[15][33] = -1 ; A[15][39] = -1 ; A[15][32] = 1 ; 						
A[16][28] = 1 ; A[16][34] = -1 ; A[16][40] = -1 ; A[16][33] = 1 ; 						
A[17][29] = 1 ; A[17][35] = -1 ; A[17][41] = -1 ; A[17][34] = 1 ; 						



########## Loop First Stage ##############	
# defining the resistances#   the index +1  R[6] is R_7  ########
A[18][6] = R[6] ; A[18][13] = R[13] ; A[18][18] = -R[18] ; A[18][12] = -R[12] ; 								
A[19][7] = R[7] ; A[19][14] = R[14] ; A[19][19] = -R[19] ; A[19][13] = -R[13] ; 								
A[20][8] = R[8] ; A[20][15] = R[15] ; A[20][20] = -R[20] ; A[20][14] = -R[14] ; 								
A[21][9] = R[9] ; A[21][16] = R[16] ; A[21][21] = -R[21] ; A[21][15] = -R[15] ; 								
A[22][10] = R[10] ; A[22][17] = R[17] ; A[22][22] = -R[22] ; A[22][16] = -R[16] ; 								
A[23][11] = R[11] ; A[23][12] = R[12] ; A[23][23] = -R[23] ; A[23][17] = -R[17] ; 								

	
########## Loop Second Stage ##############		
A[24][18] = R[18] ; A[24][25] = R[25] ; A[24][30] = -R[30] ; A[24][24] = -R[24] ; 												
A[25][19] = R[19] ; A[25][26] = R[26] ; A[25][31] = -R[31] ; A[25][25] = -R[25] ; 							
A[26][20] = R[20] ; A[26][27] = R[27] ; A[26][32] = -R[32] ; A[26][26] = -R[26] ; 							
A[27][21] = R[21] ; A[27][28] = R[28] ; A[27][33] = -R[33] ; A[27][27] = -R[27] ; 							
A[28][22] = R[22] ; A[28][29] = R[29] ; A[28][34] = -R[34] ; A[28][28] = -R[28] ; 							
A[29][23] = R[23] ; A[29][24] = R[24] ; A[29][35] = -R[35] ; A[29][29] = -R[29] ; 							


########## Loop Third Stage ##############
A[30][30] = R[30] ; A[30][37] = R[37]  ; A[30][36] = -R[36] ; 
A[31][31] = R[31] ; A[31][38] = R[38]  ; A[31][37] = -R[37] ; 						
A[32][32] = R[32] ; A[32][39] = R[39]  ; A[32][38] = -R[38] ; 						
A[33][33] = R[33] ; A[33][40] = R[40]  ; A[33][39] = -R[39] ; 						
A[34][34] = R[34] ; A[34][41] = R[41]  ; A[34][40] = -R[40] ; 						
A[35][35] = R[35] ; A[35][36] = R[36]  ; A[35][41] = -R[41] ; 						


########## Boundary Conditions ############## 
A[36][0] = 1 ; C[36][0] = 1 ;		
A[37][1] = 1 ; C[37][0] = 0 ;		
A[38][2] = 1 ; C[38][0] = 0 ;		
A[39][3] = 1 ; C[39][0] = -1 ;		
A[40][4] = 1 ; C[40][0] = 0 ;		
A[41][5] = 1 ; C[41][0] = 0 ;


# Solve the matrix equation
I = solve(A, C)


##### Access the solution######
####  I[7] is I_6 ########

V = R[6] * I[6] + R[7]* I[7] + R[8] * I[8];
R_t = V/I[0];
print(V, I[0], R_t)

##current = I[10]
#print(current)


################# Check whether the solution is correct ################
print(np.allclose(np.dot(A,I),C))